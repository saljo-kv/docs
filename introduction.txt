Welcome to the Netra SDK documentation! This page provides a comprehensive introduction to the Netra SDK, a powerful Python library designed to bring robust observability to your AI applications, with a special focus on Large Language Model (LLM) systems.

What is Netra SDK?
The Netra SDK is a comprehensive library engineered for AI application observability. It provides advanced capabilities for monitoring, tracing, and analyzing LLM-powered applications. It enables seamless instrumentation, granular session tracking, and privacy-focused data analysis for your AI systems.

In the rapidly evolving landscape of AI, understanding the behavior of your LLM applications, ensuring data privacy, and detecting security threats are paramount. Netra SDK empowers developers and operations teams with the tools needed to gain deep insights into their AI workflows, maintain data integrity, and safeguard against vulnerabilities, allowing you to build and operate reliable and secure AI solutions.

Key Capabilities
Netra SDK is packed with features to provide unparalleled visibility and control over your AI applications:

Comprehensive AI Observability
Netra SDK offers in-depth monitoring across various components of your AI application, providing a complete picture of its performance and behavior:

LLM Call Monitoring: Gain visibility into every interaction with your Large Language Models. This includes tracking prompts, completions, model usage, latency, and errors across a wide range of LLM providers.

Vector Database Operations: Observe how your application interacts with vector databases, including query performance, data retrieval patterns, and potential bottlenecks.

HTTP Request Tracing: Monitor all internal and external HTTP communications made by your application, providing insights into dependencies and network performance.

Privacy and Security
Prioritizing data protection and application security, Netra SDK incorporates robust mechanisms to handle sensitive information and defend against malicious attacks:

Privacy Protection: The SDK features advanced Personally Identifiable Information (PII) detection and masking capabilities. It supports multiple detection engines, including a robust default detector, a Presidio-based approach for fine-grained control, and a Regex-based approach for custom pattern matching. This functionality extends to detecting and masking PII within chat messages, ensuring comprehensive privacy across conversational AI interactions. You can configure actions such as masking, blocking, or simply flagging detected PII.

Security Scanning: Proactive prompt injection detection and prevention capabilities help safeguard your LLM models from malicious inputs designed to manipulate their behavior or extract sensitive information.

Industry-Standard Integration
Leveraging established standards for seamless integration within your existing observability ecosystem:

OpenTelemetry Integration: Netra SDK is built on the OpenTelemetry standard for collecting and exporting tracing and metrics data. This adherence ensures broad compatibility with a wide range of observability backends, including popular open-source solutions like Jaeger, Prometheus, and Grafana, as well as commercial platforms such as New Relic, Datadog, Honeycomb, and others. This commitment to OpenTelemetry provides vendor-agnostic data collection, consistent telemetry data across all your tools, flexible integration with existing infrastructure, and a future-proof approach to observability.

Effortless Instrumentation
Netra SDK streamlines the process of adding observability to your code, minimizing manual effort:

Decorator Support: The SDK provides intuitive decorators, such as @workflow, @agent, and @task, which can be easily applied to your functions and classes. These decorators automatically instrument your code, generating traces and capturing relevant data without extensive manual configuration. This simplifies the process of gaining insights into the logical units of your AI application.

Automatic Instrumentation: Beyond decorators, Netra SDK offers out-of-the-box instrumentation for a vast array of popular third-party libraries and frameworks commonly used in AI applications. This significantly reduces the need for manual setup, allowing you to quickly gain observability across your technology stack.

Broad Compatibility
Netra SDK is designed to work seamlessly with your existing technology stack, offering extensive support for various components:

Multi-Provider Support for LLMs: It is compatible with all leading Large Language Model providers, including but not limited to OpenAI, Anthropic Claude, Google GenAI (Gemini), Mistral AI, Aleph Alpha, AWS Bedrock, Groq, Ollama, Replicate, Together AI, Hugging Face Transformers, Vertex AI, and IBM Watson X.

Extensive Database and Client Instrumentation: The SDK provides support for popular vector databases such as Weaviate, Qdrant, Pinecone, Chroma, LanceDB, Marqo, Milvus, and Redis. It also instruments commonly used HTTP clients like HTTPX, AIOHTTP, and Requests, as well as various web frameworks including FastAPI, Django, Flask, Falcon, Starlette, and Tornado. Furthermore, it supports a wide array of traditional database clients like PyMySQL, SQLAlchemy, Psycopg, Pymongo, Elasticsearch, Cassandra, and many more.

Messaging & Task Queue Integration: Integrates with essential messaging and task queue systems like Celery, Pika, Kafka, and AWS SQS, allowing you to trace asynchronous operations.

AI Frameworks & Orchestration: Seamlessly integrates with leading AI frameworks and orchestration tools, including LangChain, LangGraph, LlamaIndex, Haystack, CrewAI, and Model Context Protocol (MCP).

Enhanced Insights
Netra SDK provides powerful utilities for gaining deeper insights into user interactions and application performance:

Session Management: Track user sessions and associate custom attributes with them. This allows you to gain context-rich insights into user behavior, feature adoption, and application performance tied directly to user experiences. You can set unique session, user, and tenant IDs, as well as custom attributes.

Custom Event Logging: Record custom business events and metrics, enabling you to track specific actions or milestones within your application's lifecycle. These custom events can be enriched with detailed attributes.

Custom Span Tracking: For granular observability over specific external API calls or custom operations within your application, Netra SDK offers a utility for custom span tracking. This allows you to define and manage custom traces, setting details such as prompts, negative prompts, models used, specific usage data (including cost), and any other relevant custom attributes. You can also add events within these custom spans to mark significant moments in the operation.

Flexible Configuration
Netra SDK offers robust and flexible configuration options to tailor its behavior to your specific deployment needs:

Environment Variable Configuration: Many aspects of the SDK can be configured using environment variables, making it easy to manage settings across different deployment environments without modifying your application code.

Programmatic Configuration: For maximum control and dynamic adjustments, the SDK also supports programmatic configuration during its initialization.

Configuration Precedence: The SDK follows a clear precedence for applying configuration values: parameters passed directly in code take precedence over Netra-specific environment variables, which in turn override standard OpenTelemetry environment variables, finally falling back to default values. This hierarchical approach ensures that your most specific configurations are always honored.

Custom Instrumentation Selection: You have precise control over which instrumentations are enabled or blocked. This allows you to tailor the SDK's behavior to your application's specific needs, enabling only the relevant integrations and avoiding unnecessary overhead.